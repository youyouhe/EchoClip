version: '3.3'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: echoclip-mysql
    ports:
      - "3307:3306"  # Using 3307 to avoid conflict with existing MySQL on 3306
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: youtube_slicer
      MYSQL_USER: youtube_user
      MYSQL_PASSWORD: youtube_password
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - echoclip-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "youtube_user", "-pyoutube_password"]
      timeout: 20s
      retries: 10
      interval: 10s

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: echoclip-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - echoclip-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
      interval: 5s

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: echoclip-minio
    # 移除端口暴露，通过前端代理访问
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - echoclip-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      timeout: 5s
      retries: 5
      interval: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: echoclip-backend
    # 移除端口暴露，仅通过前端代理访问
    environment:
      - DATABASE_URL=mysql+aiomysql://youtube_user:youtube_password@mysql:3306/youtube_slicer?charset=utf8mb4
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_PUBLIC_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=youtube-videos
      - SECRET_KEY=your-secret-key-change-in-production
      - DEBUG=true
      - FRONTEND_URL=http://frontend:3000
    depends_on:
      - mysql
      - redis
      - minio
    volumes:
      - ./backend:/app
      - ./.env:/app/.env:ro
      - media_files:/app/media
      - /tmp/cookies:/tmp/cookies
    networks:
      - echoclip-network

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: echoclip-celery
    command: celery -A app.core.celery worker --loglevel=info --concurrency=1
    environment:
      - DATABASE_URL=mysql+aiomysql://youtube_user:youtube_password@mysql:3306/youtube_slicer?charset=utf8mb4
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_PUBLIC_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=youtube-videos
      - SECRET_KEY=your-secret-key-change-in-production
    depends_on:
      - mysql
      - redis
      - minio
      - backend
    volumes:
      - ./backend:/app
      - ./.env:/app/.env:ro
      - media_files:/app/media
      - /tmp/cookies:/tmp/cookies
    networks:
      - echoclip-network

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: echoclip-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    environment:
      - DATABASE_URL=mysql+aiomysql://youtube_user:youtube_password@mysql:3306/youtube_slicer?charset=utf8mb4
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_PUBLIC_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET_NAME=youtube-videos
      - SECRET_KEY=your-secret-key-change-in-production
    depends_on:
      - mysql
      - redis
      - minio
      - backend
    volumes:
      - ./backend:/app
      - ./.env:/app/.env:ro
    networks:
      - echoclip-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: echoclip-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=/api
      - NODE_ENV=development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - echoclip-network

volumes:
  redis_data:
  minio_data:
  media_files:
  mysql_data:

networks:
  echoclip-network:
    driver: bridge